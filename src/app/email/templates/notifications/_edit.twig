{% extends "sprout-base-email/_layouts/base" %}

{% import "_includes/forms" as forms %}
{% import "sprout-base-fields/_includes/forms" as sproutFields %}
{% import 'sprout-base-config/_includes/sproutcp' as sprout %}

{% do view.registerAssetBundle("barrelstrength\\sproutbase\\config\\web\\assets\\cp\\CpAsset") %}

{% if notificationEmail.id is null %}
    {% set notificationId = 'new' %}
{% else %}
    {% set notificationId = notificationEmail.id %}
{% endif %}

{% set crumbs = [
    { label: "Notifications"|t('sprout'), url: cpUrl('sprout/notifications') },
    { label: "Settings"|t('sprout'), url: cpUrl('sprout/notifications/settings/edit/' ~ notificationId) },
] %}

{% set title  = notificationEmail is defined ? notificationEmail.title : 'Create a new Notification Email'|t('sprout') %}

{% set fullPageForm = true %}
{% set saveShortcutRedirect = cpUrl('sprout/notifications/edit/' ~ notificationId) %}

{% set mailer = notificationEmail.getMailer() %}

{% block header %}

    {{ block('pageTitle') }}
    {{ block('contextMenu') }}

    <div class="flex">

        {% if showPreviewBtn or shareUrl is not null %}

            <div class="btngroup">
                {% if showPreviewBtn %}
                    <div class="btn livepreviewbtn" data-icon="view" tabindex="0">{{ "Preview"|t('sprout') }}</div>
                {% endif %}
                {% if shareUrl is defined %}
                    <a id="share-btn" class="btn" href="{{ shareUrl }}"
                        target="_blank">{{ 'Share'|t('sprout') }}</a>
                {% endif %}
            </div>
        {% endif %}

        {{ block('actionButton') }}
    </div>

{% endblock %}

{% block actionButton %}
    {#        <div id="save-btn-container" class="btngroup submit">#}
    {#            <input type="submit" class="btn submit" value="Save">#}
    {#            <div class="btn submit menubtn" tabindex="0" role="combobox" aria-owns="menu.Garnish665238668" aria-haspopup="true" aria-expanded="false"></div>#}

    {#        </div>#}

    <div class="buttons">
        <a href="{{ cpUrl('sprout/notifications/settings/edit/' ~ notificationId) }}"
            data-icon="settings" class="btn"></a>

        <div id="save-btn-container" class="btngroup submit">
            <input class="btn submit" type="submit"
                value="{{ 'Save'|t('sprout') }}">
            <div class="btn submit menubtn"></div>
            <div class="menu">
                <ul>
                    <li><a class="formsubmit"
                            data-redirect="{{ saveShortcutRedirect|hash }}">
                            {{ "Save and continue editing"|t('sprout') }}
                            <span
                                class="shortcut">âŒ˜S</span></a></li>
                    <li><a class="formsubmit"

                            data-redirect="sprout/notifications/settings/edit/new"
                            title="{{ 'Edit Field Layout'|t('sprout') }}">
                            {{ "Save and add another"|t('sprout') }}</a>
                    </li>
                </ul>
                {% if notificationEmail.id is not null %}
                    <hr>
                    {% set redirectOnDelete = 'sprout/notifications' %}
                    <ul>
                        <li><a class="formsubmit error"
                                data-action="sprout/notifications/delete-notification-email"
                                data-confirm="{{ 'Are you sure you want to delete this notification email?'|t('sprout') }}"
                                data-redirect="{{ redirectOnDelete|hash }}">{{ "Delete"|t('sprout') }}</a>
                        </li>
                    </ul>
                {% endif %}

            </div>

        </div>

        {% if not isPro %}
            {{ sprout.upgradeToProButton({
                url: cpUrl('sprout/upgrade/email'),
                title: "Upgrade to Sprout Sent Email PRO to manage Resend Emails"|t('sprout')
            }) }}
        {% endif %}
    </div>



{% endblock %}

{% block content %}

    <input type="hidden" name="action" value="sprout/notifications/save-notification-email">
    {{ redirectInput('sprout/notifications') }}
    {% if notificationEmail.id is not null %}
        <input type="hidden" name="emailId" value="{{ notificationEmail.id }}">
    {% endif %}

    {% if namespace is not defined %}{% set namespace = 'fields' %}{% endif %}

    <div id="fields">
        {% include "sprout-base-email/notifications/_fieldlayout" %}
    </div>

{% endblock %}

{% block details %}

    <div class="meta">

        {{ forms.textField({
            label: "From Name <span class='info'>The person or business sending the email</span>"|t('sprout'),
            name: 'fromName',
            placeholder: siteName,
            value: notificationEmail.fromName is not empty ? notificationEmail.fromName : '',
            errors: notificationEmail is defined ? notificationEmail.getErrors('fromName') : null,
            required: true
        }) }}

        {{ forms.textField({
            name: 'fromEmail',
            label: "From Email <span class='info'>The email address of the person or business sending the email</span>"|t('sprout'),
            placeholder: currentUser.email,
            value: notificationEmail.fromEmail is not empty ? notificationEmail.fromEmail : '',
            errors: notificationEmail is defined ? notificationEmail.getErrors('fromEmail') : null,
            required: true
        }) }}

        {{ forms.textField({
            name: 'replyToEmail',
            label: "Reply To <span class='info'>The email address which will be used if any recipients reply to your email. Defaults to use From Email.</span>"|t('sprout'),
            placeholder: currentUser.email,
            value: notificationEmail.replyToEmail is not empty ? notificationEmail.replyToEmail : '',
            errors: notificationEmail is defined ? notificationEmail.getErrors('replyToEmail') : null
        }) }}
    </div>

    <div class="meta">

        {{ forms.selectField({
            label: "Send Method  <span class='info'>The List method will send an individual email to each email identified in your Recipients. The Single Email method will send one email to all Recipients together.</span>"|t('sprout'),
            id: 'sendMethod',
            name: 'sendMethod',
            options: [
                { value: 'emailList', label: "List"|t('sprout') },
                { value: 'singleEmail', label: "Single Email"|t('sprout') }
            ],
            default: 'emailList',
            value: notificationEmail.sendMethod ?? 'emailList',
            required: true
        }) }}

        {% if mailer.hasLists() %}
            {% namespace 'lists' %}
                {{ mailer.getListsHtml(notificationEmail.listSettings)|raw }}
            {% endnamespace %}
        {% endif %}

        {{ forms.textField({
            label: "To <span class='info'>A comma separated list of email addresses.</span>"|t('sprout'),
            placeholder: "user@domain.com, other@domain.com"|t('sprout'),
            name: "recipients",
            class: "code",
            value: notificationEmail is defined ? notificationEmail.recipients : "",
            errors: notificationEmail is defined ? notificationEmail.getErrors('recipients')
        }) }}

        {{ forms.textField({
            label: "CC <span class='info'>A comma separated list of email addresses.</span>"|t('sprout'),
            placeholder: "user@domain.com, other@domain.com"|t('sprout'),
            name: "cc",
            fieldClass: 'send-method-singlemail',
            class: "code",
            value: notificationEmail is defined ? notificationEmail.cc : "",
            errors: notificationEmail is defined ? notificationEmail.getErrors('cc')
        }) }}

        {{ forms.textField({
            label: "BCC <span class='info'>A comma separated list of email addresses.</span>"|t('sprout'),
            placeholder: "user@domain.com, other@domain.com"|t('sprout'),
            name: "bcc",
            fieldClass: 'send-method-singlemail',
            class: "code",
            value: notificationEmail is defined ? notificationEmail.bcc : "",
            errors: notificationEmail is defined ? notificationEmail.getErrors('bcc')
        }) }}
    </div>

    <div class="meta">

        {% if events|length %}

            {% set eventOptions = [{
                'label': 'Select event...'|t('sprout'),
                'value': null
            }] %}

            {% for eventClass, event in events %}

                {% set isSaveEntryEvent = eventClass == 'barrelstrength\\sproutemail\\events\\notificationevents\\EntriesSave' %}

                {% set eventOptions = eventOptions|merge([{
                    label: event.getName(),
                    value: eventClass,
                    disabled: not isPro and not isSaveEntryEvent
                }]) %}
            {% endfor %}

            {% set upgradeDescriptionEventId = '' %}
            {% if not isPro %}
                {% set upgradeDescriptionEventId = ' <strong>Upgrade to PRO</strong> to use all Notification Events. '|t('sprout') %}
            {% endif %}

            {{ forms.selectField({
                id: "notificationEvent",
                name: "eventId",
                label: "Event <span class='info'>The event that will trigger your notification.{upgradeDescriptionEventId}</span>"|t('sprout', {
                    upgradeDescriptionEventId: upgradeDescriptionEventId
                }),
                options: eventOptions,
                value: notificationEmail.eventId is defined ? notificationEmail.eventId : null,
                required: true
            }) }}

            {% for type, event in events %}
                <div class="field event-options {{ event.getEventId() }}">
                    <div class="heading">
                        Settings
                    </div>
                    <div class="input">
                        {% if event.settings|length %}
                            {% namespace 'eventSettings[' ~ type ~ ']' %}
                                {{ event.getSettingsHtml()|raw }}
                            {% endnamespace %}
                        {% else %}
                            <span class="light">&mdash;</span>
                        {% endif %}
                    </div>
                </div>
            {% endfor %}

            {{ forms.field({
                label: "Send Rule <span class='info'>Defines how to check a form submission to determine if a user has opted in to have data sent to this Integration. The Integration will be sent if the setting is set to 'Always'; if the Custom Rule is used and evaluates to '1', 'true', 'on', or 'yes'. If none of those conditions are met, the Event will not be sent.</span>"|t('sprout'),
                errors: (notificationEmail is defined ? notificationEmail.getErrors('sendRule') : null),
                required: true
            }, sproutFields.selectOther({
                name: 'sendRule',
                options: notificationEmail.getSendRuleOptions(),
                value: notificationEmail.sendRule ?? '*',
                otherPlaceholderText: "{% if object.customFieldHandle == 'send' %}true{% else %}false{% endif %}"|t('sprout')
            })) }}

            {{ forms.lightswitchField({
                first: true,
                label: "Attach Files <span class='info'>All files submitted with your entries will be attached to the notification email</span>"|t('sprout'),
                id: 'enableFileAttachments',
                name: 'enableFileAttachments',
                on: notificationEmail.enableFileAttachments,
                onLabel: "Enable"|t('sprout'),
                offLabel: "Disable"|t('sprout')
            }) }}

        {% endif %}

    </div>

    <div class="meta">

        {{ forms.textField({
            label: "Title Format <span class='info'>Update the Notification Email Title in the Control Panel to follow a pattern.</span>"|t('sprout'),
            id: 'titleFormat',
            name: 'titleFormat',
            value: notificationEmail is defined ? notificationEmail.titleFormat : null,
            autofocus: true,
            first: true,
            errors: notificationEmail is defined ? notificationEmail.getErrors('titleFormat') : null
        }) }}

        {{ forms.textField({
            label: "Slug"|t('sprout'),
            id: 'slug',
            name: 'slug',
            value: notificationEmail.slug,
            errors: notificationEmail ? notificationEmail.getErrors('slug')|merge(notificationEmail.getErrors('uri')),
        }) }}

        {% set templateOptions = sprout.email.getEmailTemplateOptions(notificationEmail) %}

        {{ forms.field({
            label: "Templates <span class='info'>The Email Templates to display your email.</span>"|t('sprout'),
            errors: notificationEmail is defined ? notificationEmail.getErrors('emailTemplateId') : null,
        }, sproutFields.selectOther({
            name: 'emailTemplateId',
            options: templateOptions,
            value: notificationEmail is defined ? notificationEmail.emailTemplateId : null,
            otherPlaceholderText: '_email/email-template-folder'|t('sprout'),
            errors: notificationEmail is defined ? notificationEmail.getErrors('emailTemplateId')
        })) }}

        {{ forms.lightswitchField({
            label: "Status"|t('sprout'),
            id: 'enabled',
            name: 'enabled',
            on: notificationEmail.enabled
        }) }}

    </div>

{% endblock %}

{% do view.registerAssetBundle("barrelstrength\\sproutbase\\config\\web\\assets\\cp\\CpAsset") %}
{% do view.registerAssetBundle("craft\\web\\assets\\fields\\FieldsAsset") %}
{% do view.registerAssetBundle("barrelstrength\\sproutbase\\app\\email\\web\\assets\\email\\EmailAsset") %}

{% if not notificationEmail.slug %}
    {% js %}
        window.slugGenerator = new Craft.SlugGenerator('#subjectLine', '#slug');
    {% endjs %}
{% endif %}

{% js on ready %}

    new SproutEmailNotificationEventToggle();
    new SproutModal();

    // add support for select other field
    if (Craft.SproutFields != null) {
    Craft.SproutFields.initFields($("#details"));
    }

    {% if notificationEmail.sendMethod == 'emailList' %}
        $('.send-method-singlemail').hide();
    {% endif %}

    $('#sendMethod').on('change', function() {
    if ($(this).val() == 'singleEmail'){
    $('.send-method-singlemail').show();
    } else {
    $('.send-method-singlemail').hide();
    }
    });

{% endjs %}