{% extends "sprout/_layouts/base" %}
{% import "_includes/forms" as forms %}
{% import "sprout/fields/_includes/forms" as sproutFields %}
{% import "sprout/_includes/sproutcp" as sproutCp %}

{% do view.registerAssetBundle("barrelstrength\\sproutbase\\web\\assetbundles\\reports\\SproutReportsAsset") %}

{% set selectedSubnavItem = 'reports' %}

{% set isPro = config.getIsPro() %}
{% set enableUpgradeMessages = config.enableUpgradeMessages() %}

{% set title = report['id'] is defined and report['id'] is not empty
    ? "Edit Report"|t('sprout')
    : "New Report"|t('sprout') %}

{% set crumbs = [
    { label: 'Reports'|t('sprout'), url: cpUrl('sprout/reports') }
] %}

{% set tabs = [
    {
        label: 'Report',
        url: '#tab-report',
        class: null,
    }
] %}

{% if enableUpgradeMessages and not isPro %}
    {% set tabs = tabs|merge([{
        label: 'Visualization',
        url: '#tab-visualization',
        class: null,
    }]) %}
{% endif %}

{% if enableUpgradeMessages and not isPro %}
    {% set tabs = tabs|merge([{
        label: 'Mailing List',
        url: '#tab-mailing-list',
        class: null
    }]) %}
{% endif %}

{% set fullPageForm = true %}

{% if groups | length %}
    {% set groupId = report is defined ? report.groupId : null %}

    {% if not groupId %}
        {% set groupId = groups|keys[0] %}
    {% endif %}

    {% if groups[groupId] is not defined %}
        {% exit 404 %}
    {% endif %}
{% endif %}

{% set saveShortcutRedirect = continueEditingUrl %}

{% block actionButton %}

    <input type="hidden" name="action" value="sprout/reports/save-report">
    {{ redirectInput('sprout/reports') }}

    <div class="buttons">
        <div class="btngroup">
            <input type="submit" class="btn submit"
                value="{{ "Save Report"|t('sprout') }}">

            <div class="btn submit menubtn"></div>
            <div class="menu">
                <ul>
                    <li><a class="formsubmit"
                            data-redirect="{{ continueEditingUrl|hash }}">{{ "Save and continue editing"|t('sprout') }}
                            <span class="shortcut">âŒ˜S</span></a>
                    </li>
                    <li><a class="formsubmit"
                            data-redirect="{{ cpUrl('sprout/reports/'~dataSource.id~'/new')|hash }}">
                            {{ "Save and add another report"|t('sprout') }}</a>
                    </li>
                </ul>

                {% if report.id is not null %}
                    <hr>
                    <ul>
                        <li>
                            <a class="formsubmit error" data-action="sprout/reports/delete-report" data-confirm="{{ 'Are you sure you want to delete this report?'|t('sprout') }}" data-redirect="{{ 'sprout/reports'|hash }}">{{ "Delete"|t('sprout') }}</a>
                        </li>
                    </ul>
                {% endif %}
            </div>
        </div>

        {% if config.getEnableUpgradeMessages() and config.isUpgradable() %}
            {{ sproutCp.upgradeToProButton({
                url: config.getUpgradeUrl(),
                title: config.getUpgradeMessage()
            }) }}
        {% endif %}
    </div>

{% endblock %}

{% block content %}

    <input type="hidden" name="dataSourceId" value="{{ dataSource.id }}">

    {% if report is defined %}
        <input type="hidden" name="id" value="{{ report.id }}">
    {% endif %}

    <div id="tab-report">

        {{ forms.textField({
            label: "Name"|t('sprout'),
            instructions: "What this report will be called in the CP."|t('sprout'),
            id: "name",
            name: 'name',
            value: report is defined ? report.name : "",
            errors: report is defined ? report.getErrors('name') : "",
            required: true,
            first: true,
            autofocus: true
        }) }}

        {{ forms.textField({
            label: "Description"|t('sprout'),
            instructions: "A description of your report that will appear in the info bubble next to your Report Name on the Reports Index page."|t('sprout'),
            name: 'description',
            rows: 3,
            value: report is defined ? report.description : "",
            errors: report is defined ? report.getErrors('description') : ""
        }) }}

        {% if dataSource is defined %}

            {% set settingsHtml = dataSource.getSettingsHtml() %}

            {% if settingsHtml %}
                <hr>
                {{ settingsHtml | raw }}
            {% endif %}

        {% endif %}

    </div>

    <div id="tab-visualization" class="hidden">

        {% if not isPro %}
            {{ sproutCp.upgradeToProCallout({
                message: config.getUpgradeMessage(),
                cpUrl: config.getUpgradeUrl()
            }) }}

            <hr>
        {% endif %}

        <h3>{{ "Visualizations"|t('sprout') }}</h3>

        <div style="padding: 14px;background-color: #f3f7fc;border-radius:4px;">

            <p>{{ "Visualizations allow you to configure your report to display a graphic on the results page. While all Visualization Types are displayed below, visualizations will only work if the columns returned in the report results have the correct data types used in the visualization."|t('sprout') }}<p>

            <p>{{ "The settings for the Visualization Type you select below will help Sprout Reports know how to display the graphic."|t('sprout') }}<p>

        </div>

        {{ forms.selectField({
            label: 'Visualization Type',
            name: 'visualizationType',
            value: settings.visualization.type,
            options: visualizationOptions,
            disabled: not isPro
        }) }}

        {% for item in visualizationTypes %}
            {% set isCurrent = (settings.visualization.type == className(item.chart)) %}
            <div id="{{ className(item.chart)|id }}"{% if not isCurrent %} class="hidden"{% endif %}>
                {% namespace 'visualizations['~className(item.chart)~']' %}
                    {{ item.chart.getSettingsHtml(settings.visualization)|raw }}
                {% endnamespace %}
            </div>
        {% endfor %}

    </div>


    <div id="tab-mailing-list" class="hidden">

        {% if not isPro %}
            {{ sproutCp.upgradeToProCallout({
                message: config.getUpgradeMessage(),
                cpUrl: config.getUpgradeUrl()
            }) }}

            <hr>

        {% endif %}

        <h3>{{ "Mailing Lists"|t('sprout') }}</h3>

        <div style="padding: 14px;background-color: #f3f7fc;border-radius:4px;">

            <p>{{ "Reports can be used as Mailing Lists when sending Notification Emails in Sprout Email and Sprout Forms. A Report becomes a Mailing List when the Email Column setting is defined."|t('sprout') }}<p>

            <p>{{ "The Email Column should reference a column that is returned by the report that provides a valid email address. The Email Column name is case sensitive and should exactly match the column name in the header of the report. If the value returned by the Email Column does not validate as an email, it will be ignored."|t('sprout') }}</p>

        </div>

        {% if report.getDataSource().isEmailColumnEditable() %}
            {{ forms.field({
                label: 'Email Column'|t('sprout'),
                placeholder: 'Email'|t('sprout'),
            }, sproutFields.selectOther({
                name: 'emailColumn',
                options: emailColumnOptions,
                value: report.emailColumn,
                otherPlaceholderText: 'email'|t('sprout-forms'),
                disabled: not isPro
            })) }}
        {% else %}
            {# Email column not editable and set by Data Source #}
            {{ forms.textField({
                label: 'Email Column'|t('sprout'),
                name: 'emailColumn',
                class: 'code',
                value: report is defined ? report.getDataSource().getDefaultEmailColumn() : "",
                errors: report is defined ? report.getErrors('emailColumn') : "",
                warning: 'Email Column is set by Data Source'|t('sprout'),
                readonly: true
            }) }}
        {% endif %}

    </div>

{% endblock %}

{% block details %}

    <div id="settings" class="meta">

        {% if groups | length %}

            {% set groupOptions = [] %}
            {% set groupOptions = groupOptions|merge([{ label: 'None'|t('sprout'), value: '' }]) %}
            {% for group in groups %}
                {% set groupOptions = groupOptions|merge([{ label: group.name, value: group.id }]) %}
            {% endfor %}

            {{ forms.selectField({
                first: true,
                label: "Group <span class='info'>The group where this report should be displayed</span>"|t('sprout'),
                id: 'groupId',
                name: 'groupId',
                options: groupOptions,
                value: groupId
            }) }}

        {% endif %}

        {{ forms.textField({
            label: "Handle"|t('sprout'),
            id: 'handle',
            name: 'handle',
            required: true,
            value: report is defined ? report.handle : "",
            errors: report is defined ? report.getErrors('handle') : ""
        }) }}

        {{ forms.textField({
            label: "Title Format <span class='info'>Auto-generate your Report name using settings values, such as {startDate|date('F d, Y')}</span>"|t('sprout'),
            name: 'nameFormat',
            id: 'name-format-field',
            placeholder: '{dateCreated|date("D, d M Y H:i:s")}',
            value: report is defined ? report.nameFormat : "",
            errors: report is defined ? report.getErrors('nameFormat') : ""
        }) }}

        {{ forms.selectField({
            label: "Sort Order <span class='info'>The order that the column defined in the Sort Column setting will be displayed. Sort Column setting must also be defined.</span>"|t('sprout'),
            name: 'sortOrder',
            options: [
                { label: 'None', value: '' },
                { label: 'Ascending (A-Z)', value: 'asc' },
                { label: 'Descending (Z-A)', value: 'desc' }
            ],
            value: report.sortOrder
        }) }}

        {{ forms.textField({
            label: "Sort Column <span class='info'>The case-sensitive, column name in the Report results that you want to sort by default. Leave blank for none. Sort Order setting must also be defined.</span>"|t('sprout'),
            name: 'sortColumn',
            value: report.sortColumn,
            errors: report is defined ? report.getErrors('sortColumn') : ""
        }) }}

        {{ forms.field({
            label: 'Delimiter <span class="info">Select the delimiter to use when exporting the report.</span>'|t('sprout'),
            placeholder: ',',
        }, sproutFields.selectOther({
            name: 'delimiter',
            options: delimiterOptions,
            value: report.delimiter ?? reportsSettings.defaultExportDelimiter,
            otherPlaceholderText: ','|t('sprout')
        })) }}

        {% if dataSource.isAllowHtmlEditable() %}
            {{ forms.lightSwitchField({
                label: "Allow HTML <span class='info'>Render HTML in your report results. Don't enable this setting if you allow user submitted content.</span>"|t('sprout'),
                name: 'allowHtml',
                on: report.allowHtml is defined ? report.allowHtml : dataSource.getDefaultAllowHtml()
            }) }}
        {% endif %}

        {{ forms.lightSwitchField({
            label: "Enabled"|t('sprout'),
            name: 'enabled',
            on: report.enabled
        }) }}
    </div>

    <div class="meta read-only">
        <div class="data">
            <h5 class="heading">{{ "Data Source"|t('sprout') }}</h5>
            <div class="value">{{ dataSource.displayName() }}</div>
        </div>
    </div>

{% endblock %}

{% if report is not defined or not report.handle %}
    {% js "new Craft.HandleGenerator('#name', '#handle');" %}
{% endif %}

{% js on ready %}
    // add support for select other field in sidebar
    if (Craft.SproutFields != null) {
    Craft.SproutFields.initFields($("#details"));
    }

    new SproutReportsVisualizationSettings();
{% endjs %}
